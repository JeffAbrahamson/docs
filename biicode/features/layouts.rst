.. _project_layout:

Projects layouts
===================

This section describes the **folders structure of a typical biicode project**. If you haven't done so, we recommend reading these :ref:`basic biicode concepts <basic_concepts>` first, understandig the conceps of project and block.

Some special biicode configuration files are also mentioned. You can read in detail about these files in the :ref:`configuration files section <config_files>`.

A biicode workspace can hold **as many projects as you want**. Rememeber that a biicode project is no other thing that a working project: a special folder that contains both your code and your code dependencies, and some custom configuration files, specific for that project.

A typical project layout is as follows: ::

|-- my_project
|    +-- bii
|    |    |-- .hive.db
|    |    |-- settings.bii
|    |    |-- policies.bii
|    +-- bin
|    +-- blocks
|    |	  +-- my_user_name
|    |    |     +-- my_block
|    |    |     |     +-- bii
|    |    |     |     |    |-- requirements.bii
|    |    |     |     |    |-- parents.bii
|    |    |     |     |    |-- mains.bii
|    |    |     |     |    |-- virtual.bii
|    |    |  	|     |-- hello.c
|    |    |     |     |-- hello.h
|    |    |     +-- my_other_block
|    |    |   	      |-- foo.c
|    |    |           |-- bar.h
|    |    +-- other_user_name
|    |          +-- block_im_editing
|	 |                +-- bii
|	 |                |    |-- mains.bii
|    |        	      |-- message.c
|    |                |-- message.h
|    +-- build
|    +-- cmake
|    |    |-- CMakeLists.txt
|    |    |-- biicode.cmake
|    |    |-- bii_vars.cmake
|    +-- deps

As you can see, the **project** contains a collection of folders. We will go through each one of them:

* The ``bii`` folder contains these files:

	* ``.hive.db``: contains all your project meta information. This file must not be manually modified or removed.
	* ``policies.bii``: contains custom policies for a given project.
	* ``settings.bii``: stores information about the project programming language, operating system, and other tools required for a particular project.
* The ``deps`` folder contains your project **dependencies source code**. All files contained in this folder are downloaded using the ``bii find`` command after analyzing your source files contained under the ``blocks`` folder. These are all the strictly necessary cells for your project to compile (when needed, if your are using a compiled language as *c* or *c++*) and run correctly.
* The ``blocks`` folder is very important, as it contains the **code of the blocks you are working on**; your source code. Code is listed under ``usernames/blockname``. In general, ``username`` will be your biicode user name. But in some cases you will be editing code originally created by other biicode user (see :ref:`how you can edit other users' blocks <bii_open_command>` with the ``bii open`` command). Under each ``username`` folder you can find all the blocks you are editing inside your project. For version control systems, it is usually ok to ignore everything but this ``blocks`` folder, and the ``bii`` folder that holds the configuration and metadata.

	* ``bii``: Every block main contain its own configuration folder, with specific block-level settings and preferences. This folder and files are optional for a block, and not always needed. But sometimes you will need additional control over a block configuration:

		* ``dependencies.bii``: This optional file allows you to set extra dependencies for your project such as license files. You can read about :ref:`dependencies configuration here <dependencies_bii>`.
		* ``mains.bii``: Is another optional configuration file for defining entry points to your code. You can :ref:`read more about this file following this link <mains_bii>`.
		* ``virtual.bii``: This optional file is used to configure :ref:`virtual resources <virtual_cells>`; those whose actual file implementation depends on certain conditions.
* ``build``: Contains build files such as make scripts and compiled objects. You can safely delete it's contents
* ``cmake``: Contains autogenerated ``CMakeLists.txt`` as well as other files that allow you to define your own cmake.
* The ``bin`` folder contains any executables generated from projects containing programs in languages that must be compiled. You can safely delete its contents, as they will be generated with every new compilation.
