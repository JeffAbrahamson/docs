.. _cpp_build_files:

Build files
===========

When building a C++ hive project, there are several important folders to take into account: ::

	|-- my_project	|    +-- blocks (the user source code is here)
	|    +-- build (to store generated project and build files)
	|    +-- cmake (generated CMake files)
	|    +-- bin (build binaries)

All these folders and their purpose are explained in detail bellow:

``cmake`` folder: CMake files
-----------------------------

In the ``cmake`` folder there are several files generated by biicode that define the build process. From these files and the hive settings, the CMake tool creates the actual project, that can be a Eclipse one (with MinGW in win or GNU Make - gcc in linux), a Visual one,  plain Makefiles, etc.

Let's assume for these examples that the user name for this example is **maya**, the hive is called **hello**, and the block name in this case is also **hello**.
The layout will be::

	|-- hello (the hive - project)
	|    +-- blocks
	|    |	  +-- maya
	|    |         +-- hello (block maya/hello)
	|    |       	    |-- hello.cpp
	|    |        	    |-- hello.h
	|    |              +-- main.cpp
	|    +-- cmake
	|    |    |-- CMakeLists.txt
	|    |    |-- bii_targets.cmake
	|    |    +-- bii_vars.cmake


CMakeLists.txt file
^^^^^^^^^^^^^^^^^^^

The CMakeLists.txt is created just once, so the user can modify its contents if necessary.

.. code-block:: cmake

	PROJECT( hello )
	cmake_minimum_required(VERSION 2.8)
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ../bin)
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ../bin)
	INCLUDE_DIRECTORIES(../blocks)
	INCLUDE_DIRECTORIES(../deps)

	# This file has all the variables used in bii_targets.cmake to define the targets
	INCLUDE(bii_vars.cmake)


	# This file defines the actual targets EXEs, LIBs STATIC and SHARED with their respective
	# settings and definitions
	INCLUDE(bii_targets.cmake)


It includes two other files, also generated by biicode. These two files are overwritten every time the *bii* tool is called and there are changes in the project.

bii_vars.cmake
^^^^^^^^^^^^^^

The first one, *bii_vars.cmake* creates variables that define the targets to build and their properties, but does not create those targets yet. Some variables might be empty, but they are declared here for convenience to the user.

.. code-block:: cmake

	#This file is automatically created by biicode.
	#Do not modify it, as your changes will be overwritten.
	###### Defining target maya_hello_main #######
	SET(BII_TARGET_maya_hello_main_NAME maya_hello_main)
	SET(BII_TARGET_maya_hello_main_TYPE EXE)
	#Ordered list of libraries to link with
	SET(BII_TARGET_maya_hello_main_LIBS )
	SET(BII_TARGET_maya_hello_main_COMPILE_FLAGS )
	SET(BII_TARGET_maya_hello_main_FILES ../blocks/maya/hello/hello.cpp
					../blocks/maya/hello/hello.h
					../blocks/maya/hello/main.cpp)
	SET(BII_TARGET_maya_hello_main_DATA_FILES )

bii_targets.cmake
^^^^^^^^^^^^^^^^^

The other *bii_targets.cmake* file, is the one that actually define the targets to be built, based on the variables declared in the previous file.

.. code-block:: cmake

	#This file is automatically created by biicode.
	#Do not modify it, as your changes will be overwritten.

	###### Artifact for target maya_hello_main #######
	ADD_EXECUTABLE( ${BII_TARGET_maya_hello_main_NAME}
					${BII_TARGET_maya_hello_main_EXE_TYPE}
					${BII_TARGET_maya_hello_main_FILES})
	TARGET_LINK_LIBRARIES( ${BII_TARGET_maya_hello_main_NAME} ${BII_TARGET_maya_hello_main_LIBS})
	SET_TARGET_PROPERTIES(${BII_TARGET_maya_hello_main_NAME} PROPERTIES COMPILE_FLAGS
					"${BII_TARGET_maya_hello_main_COMPILE_FLAGS}")


This way makes it very simple to define or customize the building process. Users can edit the used variables in the CMakeLists.txt between the two included .cmake files.

Suppose that you need to use a library, let's say Boost. If such library was already in biicode, it would be enough to just #include it. But boost is still not in biicode. Fortunately, in the meanwhile, it is fairly straightforward to modify the CMakeLists.txt in order to account for it.

For example, if the required library is lambda, which is only composed by headers, you just need to specify your boost installation directory as:

.. code-block:: cmake
	:emphasize-lines: 6

	PROJECT( hello )

	# This file has all the variables used in bii_targets.cmake to define the targets
	INCLUDE(bii_vars.cmake)

	INCLUDE_DIRECTORIES(path/to/your/boost/installation)
	# This file defines the actual targets EXEs, LIBs STATIC and SHARED with their respective
	# settings and definitions
	INCLUDE(bii_targets.cmake)

Note that this approach is not exclusive with the possibility of the user having their own CMakeLists inside their blocks along with his source code, or even other cmake files that could be included from the biicode generated CMakeList.txt one.

``build`` folder: Your build files
----------------------------------

CMake is configured to generate an out-of-source build, i.e. the project files and other temporary artifacts from the actual compilation and build process are not located in the same folder as the source code, but in a different one.
The ``build`` folder contains these temporary build and project files. Usually, this folder can be safely deleted, as it is fully automatically generated.

**NOTE: Some IDE wizards (as Visual) or other tools might create new source code files in the folder where the project is located, not in your blocks folder. This is not a problem of biicode, but happens in every out-of-source build with these IDEs. Be careful and be sure that your source code is actually located inside the blocks folder**

In this folder you can find for example the Visual Studio solution files (.sln), you can just double-click them to open the Visual IDE for the correspondent hive project. If using Eclipse, the .project and .cproject files are also located in this folder, but the hive project can be actually imported from the hive folder, as Eclipse will find them in the ``build`` subfolder. 

In general, it is a good idea to fully ignore (exclude) this folder from control version systems, or just fully delete it before zipping a hive (to send it by email, backup, or whatever).

``bin`` folder: Binary files
----------------------------

In this folder, the executables produced by biicode are located, together with the data files (as images) that are necessary for those binaries to run.

